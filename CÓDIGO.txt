import os
import tkinter as tk
from tkinter import messagebox, filedialog
from tkinter import ttk
import zipfile
from openpyxl import Workbook

# Função para buscar arquivos em pastas, subpastas e arquivos zipados
def search_files(base_paths, search_codes, specific_path):
    found_files = []

    for base_path in base_paths:
        for root, dirs, files in os.walk(base_path):
            if specific_path and specific_path not in root:
                continue
            
            for file in files:
                full_path = os.path.join(root, file)

                if file.endswith(".zip"):
                    try:
                        with zipfile.ZipFile(full_path, 'r') as z:
                            for zip_file in z.namelist():
                                for search_code in search_codes:
                                    if search_code in zip_file:
                                        found_files.append((zip_file, f"{full_path} -> {zip_file}"))
                    except zipfile.BadZipFile:
                        print(f"Arquivo zip corrompido: {full_path}")
                else:
                    for search_code in search_codes:
                        if search_code in file:
                            found_files.append((file, full_path))
    
    return found_files

# Função para abrir o arquivo selecionado
def open_file(filepath):
    try:
        if " -> " in filepath:
            zip_path, inner_file = filepath.split(" -> ")
            with zipfile.ZipFile(zip_path, 'r') as z:
                z.extract(inner_file, os.path.dirname(zip_path))
                extracted_path = os.path.join(os.path.dirname(zip_path), inner_file)
                if os.name == "nt":
                    os.startfile(extracted_path)
                else:
                    subprocess.call(["xdg-open", extracted_path])
        else:
            if os.name == "nt":
                os.startfile(filepath)
            else:
                subprocess.call(["xdg-open", filepath])
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao abrir o arquivo: {e}")

# Função para preencher a Treeview com os arquivos encontrados
def populate_tree():
    search_codes = entry_code.get().strip().split()
    specific_path = entry_specific_path.get().strip()
    
    if not search_codes or search_codes == [""]:
        messagebox.showwarning("Entrada Vazia", "Por favor, insira um ou mais códigos para buscar.")
        return

    for item in tree.get_children():
        tree.delete(item)
    
    files = search_files(base_paths, search_codes, specific_path)
    if not files:
        messagebox.showinfo("Nenhum Arquivo Encontrado", "Nenhum arquivo encontrado com os códigos especificados.")
    else:
        for idx, (filename, filepath) in enumerate(files):
            tree.insert("", "end", iid=idx, values=(filename, filepath))

# Função para exportar dados para Excel
def export_to_excel():
    files = []
    for item in tree.get_children():
        files.append(tree.item(item, "values"))
    
    if not files:
        messagebox.showwarning("Exportação", "Nenhum dado para exportar.")
        return
    
    save_path = filedialog.asksaveasfilename(
        defaultextension=".xlsx",
        filetypes=[("Arquivos Excel", "*.xlsx")]
    )
    if save_path:
        try:
            wb = Workbook()
            ws = wb.active
            ws.title = "Arquivos Encontrados"
            
            ws.append(["Nome do Arquivo", "Caminho Completo"])  # Cabeçalhos
            
            for file in files:
                ws.append(file)
            
            wb.save(save_path)
            messagebox.showinfo("Exportação", "Dados exportados com sucesso!")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao exportar os dados: {e}")

# Função para selecionar pastas base
def select_base_paths():
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        base_paths.append(folder_selected)
        label_base_paths.config(text="Caminhos base: " + ", ".join(base_paths))

# Função ao clicar no item da lista
def on_item_click(event):
    selected_items = tree.selection()
    if not selected_items:
        return
    selected_item = selected_items[0]
    file_path = tree.item(selected_item, "values")[1]
    open_file(file_path)

# Caminhos base
base_paths = []

# Interface gráfica
root = tk.Tk()
root.title("Buscar Arquivos por Código")
root.geometry("800x600")

# Frame de controle
control_frame = tk.Frame(root)
control_frame.pack(padx=10, pady=10, fill=tk.X)

# Botão para selecionar pastas base
btn_select_paths = ttk.Button(control_frame, text="Selecionar Caminhos Base", command=select_base_paths)
btn_select_paths.pack(side=tk.LEFT)

# Label para mostrar os caminhos base
label_base_paths = tk.Label(control_frame, text="Caminhos base: Nenhum selecionado", anchor="w", justify="left")
label_base_paths.pack(fill=tk.X, padx=10, pady=5)

# Entrada para o código de busca
label_code = tk.Label(control_frame, text="Código(s) de Busca:")
label_code.pack(side=tk.LEFT, padx=5)
entry_code = ttk.Entry(control_frame, width=40)
entry_code.pack(side=tk.LEFT, padx=5)
entry_code.bind("<Return>", lambda event: populate_tree())

# Entrada para o caminho específico
label_specific_path = tk.Label(control_frame, text="Caminho Específico:")
label_specific_path.pack(side=tk.LEFT, padx=5)
entry_specific_path = ttk.Entry(control_frame, width=40)
entry_specific_path.pack(side=tk.LEFT, padx=5)

# Botão para buscar arquivos
btn_load = ttk.Button(control_frame, text="Buscar Arquivos", command=populate_tree)
btn_load.pack(side=tk.LEFT)

# Botão para exportar arquivos
btn_export = ttk.Button(control_frame, text="Exportar para Excel", command=export_to_excel)
btn_export.pack(side=tk.LEFT)

# Frame da Treeview
tree_frame = ttk.Frame(root)
tree_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# Scrollbars
tree_scroll_y = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL)
tree_scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
tree_scroll_x = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)
tree_scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

# Treeview
tree = ttk.Treeview(tree_frame, columns=("Nome do Arquivo", "Caminho Completo"), show="headings", yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.heading("Nome do Arquivo", text="Nome do Arquivo")
tree.heading("Caminho Completo", text="Caminho Completo")
tree.column("Nome do Arquivo", anchor="w")
tree.column("Caminho Completo", anchor="w")
tree.pack(fill=tk.BOTH, expand=True)

tree_scroll_y.config(command=tree.yview)
tree_scroll_x.config(command=tree.xview)

tree.bind("<Double-1>", on_item_click)

root.mainloop()