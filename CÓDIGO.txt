import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime
import subprocess

# Função para buscar arquivos com o código no nome e ordená-los pela data de modificação
def search_files(base_paths, search_codes):
    found_files = []
    for base_path in base_paths:
        for root, dirs, files in os.walk(base_path):
            for file in files:
                if any(code in file for code in search_codes) and file.endswith('.txt'):
                    full_path = os.path.join(root, file)
                    mod_time = os.path.getmtime(full_path)
                    formatted_time = datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M:%S')
                    found_files.append((file, full_path, mod_time, formatted_time))
    found_files.sort(key=lambda x: x[2], reverse=True)  # Ordena pela data de modificação
    return found_files

# Função para abrir o arquivo selecionado
def open_file(filepath):
    try:
        if os.name == 'nt':  # Windows
            os.startfile(filepath)
        else:  # Linux/Mac
            subprocess.call(('xdg-open', filepath))
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao abrir o arquivo: {e}")

# Função para preencher a Treeview com os arquivos encontrados
def populate_tree():
    search_code = entry_code.get().strip().split()  # Permitir múltiplos códigos separados por espaço
    if not search_code:
        messagebox.showwarning("Entrada Vazia", "Por favor, insira um ou mais códigos para buscar.")
        return

    base_paths = []
    for var, path in path_vars:
        if var.get():
            base_paths.append(path)

    if not base_paths:
        messagebox.showwarning("Nenhum Caminho Selecionado", "Por favor, selecione pelo menos um caminho.")
        return

    files = search_files(base_paths, search_code)
    if not files:
        messagebox.showinfo("Nenhum Arquivo Encontrado", f"Nenhum arquivo encontrado com o código(s): {search_code}")
        return

    for item in tree.get_children():
        tree.delete(item)

    for idx, (filename, path, mod_time, formatted_time) in enumerate(files):
        tree.insert("", "end", iid=idx, values=(filename, formatted_time, path))

# Função para clicar no item da lista e abrir o arquivo
def on_item_click(event):
    selected_items = tree.selection()
    if not selected_items:
        return
    selected_item = selected_items[0]
    file_path = tree.item(selected_item, 'values')[2]
    open_file(file_path)

# Função para abrir o seletor de caminhos de pastas
def select_path():
    path = filedialog.askdirectory()
    return path

# Caminhos predefinidos
base_paths_default = [
    r"\\Fswcorp\ceic\DFEPJ\GAGIRE\22 - CARGA\arquivos_processados\cadastros\202410",
    r"\\Fswcorp\ceic\DFEPJ\GAGIRE\22 - CARGA\arquivos_processados\forcados\202410",
    r"\\Fswcorp\ceic\DFEPJ\GAGIRE\22 - CARGA\arquivos_processados\metas\202410",
    r"\\Fswcorp\ceic\DFEPJ\GAGIRE\22 - CARGA\arquivos_processados\tombamento",
    r"\\Fswcorp\ceic\DFEPJ\GAGIRE\22 - CARGA\arquivos_processados\vps\202410"
]

# Interface gráfica
root = tk.Tk()
root.title("Buscar Arquivos por Código")
root.geometry("800x600")

# Frame de controle para entrada de código e botão
control_frame = ttk.Frame(root)
control_frame.pack(pady=10, padx=10, fill=tk.X)

label_code = ttk.Label(control_frame, text="Código para busca:")
label_code.pack(side=tk.LEFT, padx=5)

entry_code = ttk.Entry(control_frame, width=50)
entry_code.pack(side=tk.LEFT, padx=5)
entry_code.bind('<Return>', lambda event: populate_tree())  # Permite buscar pressionando Enter

btn_load = ttk.Button(control_frame, text="Buscar Arquivos", command=populate_tree)
btn_load.pack(side=tk.LEFT)

# Frame para seleção dos caminhos predefinidos
button_frame = ttk.LabelFrame(root, text="Selecione os Caminhos Predefinidos", padx=10, pady=10)
button_frame.pack(fill=tk.X, padx=10, pady=10)

path_vars = []
for path in base_paths_default:
    var = tk.BooleanVar()
    chk = ttk.Checkbutton(button_frame, text=path, variable=var)
    chk.pack(anchor='w')
    path_vars.append((var, path))

# Treeview para listar os arquivos encontrados
tree_frame = ttk.Frame(root)
tree_frame.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

tree_scroll_y = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL)
tree_scroll_x = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)

tree = ttk.Treeview(tree_frame, columns=("Nome do Arquivo", "Data de Modificação", "Caminho Completo"), yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.heading("Nome do Arquivo", text="Nome do Arquivo")
tree.heading("Data de Modificação", text="Data de Modificação")
tree.heading("Caminho Completo", text="Caminho Completo")

tree.column("Nome do Arquivo", width=250, anchor='w')
tree.column("Data de Modificação", width=150, anchor='center')
tree.column("Caminho Completo", width=400, anchor='w')

tree.pack(fill=tk.BOTH, expand=True)
tree_scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
tree_scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

# Configuração das scrollbars
tree_scroll_y.config(command=tree.yview)
tree_scroll_x.config(command=tree.xview)

# Bind para detectar duplo clique no item da lista
tree.bind("<Double-1>", on_item_click)

root.mainloop()