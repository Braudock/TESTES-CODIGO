import os
import tkinter as tk
from tkinter import filedialog, messagebox

# Tabela de códigos e produtos
codigo_produto = {
    1461: "CONSORCIO",
    1460: "CONSORCIO",
    1471: "PERFORMANCE GERENTES PARES",
    1470: "PERFORMANCE GERENTES PARES",
    1445: "TICKET",
    1444: "TICKET",
    1442: "PIX",
    1443: "PIX",
    1439: "CONVENIENCIA DE PAGAMENTOS",
    1438: "CONVENIENCIA DE PAGAMENTOS",
    1707: "PIX",
    1702: "DEB AUT / DEB AUT AUTORIZADO",
    1481: "PRESTAMISTA AVULSO",
    1480: "PRESTAMISTA AVULSO",
    2019: "CAMBIO",
    1462: "CARTÃO BUSINESS",
    1463: "CARTÃO BUSINESS",
    1436: "FATURAMENTO DAC",
    1437: "FATURAMENTO DAC"
}

# Função para abrir uma caixa de diálogo e selecionar a pasta principal
def selecionar_pasta_principal(entry_caminho):
    pasta = filedialog.askdirectory(title="Selecione a pasta principal")
    entry_caminho.delete(0, tk.END)  # Limpar o campo de texto
    entry_caminho.insert(0, pasta)  # Inserir o caminho selecionado

# Função para verificar os arquivos nas subpastas correspondentes ao dia informado
def verificar_arquivos(pasta_principal, data):
    subpastas = [os.path.join(pasta_principal, f) for f in os.listdir(pasta_principal) if f.startswith(data)]
    codigos_encontrados = {codigo: [] for codigo in codigo_produto}

    for subpasta in subpastas:
        arquivos_txt = [f for f in os.listdir(subpasta) if f.endswith('.txt')]
        for arquivo in arquivos_txt:
            with open(os.path.join(subpasta, arquivo), 'r', encoding='utf-8') as f:
                conteudo = f.read()
                for codigo in codigo_produto:
                    if str(codigo) in conteudo:
                        codigos_encontrados[codigo].append(arquivo)

    return codigos_encontrados

# Função para exibir os resultados em uma caixa de diálogo
def exibir_resultados(codigos_encontrados):
    resultados = ""
    for codigo, arquivos in codigos_encontrados.items():
        produto = codigo_produto[codigo]
        if arquivos:
            resultados += f"Código {codigo} ({produto}) encontrado nos arquivos: {', '.join(arquivos)}\n"
        else:
            resultados += f"Código {codigo} ({produto}) não encontrado em nenhum arquivo.\n"

    messagebox.showinfo("Resultados da Verificação", resultados)

# Função principal acionada pelo botão de verificação
def iniciar_verificacao(entry_caminho, entry_data):
    pasta_principal = entry_caminho.get()
    data = entry_data.get()
    
    if not pasta_principal or not data:
        messagebox.showerror("Erro", "Caminho ou data não preenchidos!")
        return
    
    if not os.path.isdir(pasta_principal):
        messagebox.showerror("Erro", "Caminho inválido!")
        return
    
    codigos_encontrados = verificar_arquivos(pasta_principal, data)
    exibir_resultados(codigos_encontrados)

# Configuração da interface gráfica
def criar_interface():
    root = tk.Tk()
    root.title("Verificação de Produtos em Arquivos TXT")

    # Labels e campos de entrada
    lbl_caminho = tk.Label(root, text="Caminho da pasta principal:")
    lbl_caminho.grid(row=0, column=0, padx=10, pady=10)

    entry_caminho = tk.Entry(root, width=50)
    entry_caminho.grid(row=0, column=1, padx=10, pady=10)

    btn_selecionar_pasta = tk.Button(root, text="Selecionar Caminho", command=lambda: selecionar_pasta_principal(entry_caminho))
    btn_selecionar_pasta.grid(row=0, column=2, padx=10, pady=10)

    lbl_data = tk.Label(root, text="Data (YYYYMMDD):")
    lbl_data.grid(row=1, column=0, padx=10, pady=10)

    entry_data = tk.Entry(root, width=20)
    entry_data.grid(row=1, column=1, padx=10, pady=10)

    # Botão de verificação
    btn_verificar = tk.Button(root, text="Verificar Arquivos", command=lambda: iniciar_verificacao(entry_caminho, entry_data))
    btn_verificar.grid(row=2, column=1, padx=10, pady=10)

    root.mainloop()

# Execução do programa
if __name__ == "__main__":
    criar_interface()