import win32com.client
import os
import pandas as pd
import tkinter as tk
from tkinter import ttk

def adicionar_quebra_texto(texto, largura_maxima):
    # Divide o texto em múltiplas linhas se exceder a largura máxima
    palavras = texto.split()
    linhas = []
    linha_atual = []

    for palavra in palavras:
        if len(' '.join(linha_atual + [palavra])) <= largura_maxima:
            linha_atual.append(palavra)
        else:
            linhas.append(' '.join(linha_atual))
            linha_atual = [palavra]

    linhas.append(' '.join(linha_atual))
    return '\n'.join(linhas)

def listar_mensagens():
    # Acessar o aplicativo do Outlook
    outlook = win32com.client.Dispatch("Outlook.Application")
    namespace = outlook.GetNamespace("MAPI")
    inbox = namespace.GetDefaultFolder(6)
    messages = inbox.Items
    messages.Sort("[ReceivedTime]", True)
    return messages

def baixar_anexo_outlook(mensagens, pasta_destino):
    filtro_assunto = "indicadores central de atendimento"
    
    if mensagens.Count == 0:
        print("Nenhum e-mail encontrado na caixa de entrada.")
        return

    for message in mensagens:
        if filtro_assunto.lower() in message.Subject.lower():
            if message.Attachments.Count > 0:
                for anexo in message.Attachments:
                    if anexo.FileName.endswith(".xls") or anexo.FileName.endswith(".xlsx"):
                        if not os.path.exists(pasta_destino):
                            os.makedirs(pasta_destino)
                        caminho_anexo = os.path.join(pasta_destino, anexo.FileName)
                        anexo.SaveAsFile(caminho_anexo)
                        caminho_filtrado = filtrar_planilha(caminho_anexo)
                        if caminho_filtrado:
                            mostrar_informacoes(caminho_filtrado)
                    else:
                        print(f"Anexo {anexo.FileName} não é uma planilha.")
            else:
                print("Este e-mail não contém anexos.")
            return

    print("Nenhum e-mail encontrado com o assunto especificado.")

def filtrar_planilha(caminho_anexo):
    try:
        df = pd.read_excel(caminho_anexo)
        df_filtrado = df[df['Assunto'].str.contains('AGIR', na=False)]
        novo_caminho = os.path.splitext(caminho_anexo)[0] + '_filtrado.xlsx'
        df_filtrado.to_excel(novo_caminho, index=False)
        os.remove(caminho_anexo)
        return novo_caminho
    except Exception as e:
        print(f"Ocorreu um erro ao filtrar a planilha: {str(e)}")
        return None

def mostrar_informacoes(caminho_filtrado):
    try:
        df = pd.read_excel(caminho_filtrado)

        root = tk.Tk()
        root.title("Informações Filtradas")

        frame = tk.Frame(root)
        frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        tree = ttk.Treeview(frame, columns=["N ocorrência", "Abertura", "Vencimento", "Responsável Abertura", "Descrição"], show="headings")
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar_vertical = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
        scrollbar_vertical.pack(side=tk.RIGHT, fill=tk.Y)
        tree.configure(yscroll=scrollbar_vertical.set)

        for col in tree["columns"]:
            tree.heading(col, text=col)
            tree.column(col, anchor="w", width=200 if col != "Descrição" else 91)

        # Preencher a tabela com os dados
        for _, row in df.iterrows():
            descricao_com_quebra = adicionar_quebra_texto(str(row["Descrição"]), 91)
            tree.insert("", "end", values=(row["N ocorrência"], row["Abertura"], row["Vencimento"], row["Responsável Abertura"], descricao_com_quebra))

        # Definir o evento de clique para abrir a descrição detalhada
        tree.bind("<Double-1>", lambda event: mostrar_descricao_detalhada(tree, df))

        root.geometry("800x600")
        root.mainloop()

    except Exception as e:
        print(f"Ocorreu um erro ao mostrar as informações: {str(e)}")

def mostrar_descricao_detalhada(tree, df):
    # Obter a seleção atual
    selecionado = tree.selection()
    if selecionado:
        item = selecionado[0]
        valores = tree.item(item, "values")
        index = tree.index(item)

        descricao = df.iloc[index]["Descrição"]  # Obter a descrição completa
        criar_janela_descricao(descricao)

def criar_janela_descricao(descricao):
    janela = tk.Toplevel()
    janela.title("Descrição Completa")

    # Criar um frame para o Text Widget e a barra de rolagem
    frame = tk.Frame(janela)
    frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    # Criar um widget Text para mostrar a descrição
    text_widget = tk.Text(frame, wrap="word", width=100, height=30)  # Definindo largura e altura
    text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    # Adicionar uma barra de rolagem vertical
    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=text_widget.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    text_widget.configure(yscrollcommand=scrollbar.set)

    # Inserir a descrição no widget Text
    text_widget.insert(tk.END, descricao)
    text_widget.config(state=tk.DISABLED)  # Desabilitar edição

    # Configurações da janela
    janela.geometry("800x600")  # Tamanho da janela
    janela.minsize(400, 300)  # Tamanho mínimo da janela

# Definir o caminho onde a planilha será salva
pasta_destino = r'C:\caminho\para\salvar\anexo'  # Altere para o caminho desejado

# Listar mensagens na caixa de entrada
mensagens = listar_mensagens()

# Baixar o anexo do e-mail
baixar_anexo_outlook(mensagens, pasta_destino)